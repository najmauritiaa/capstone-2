# -*- coding: utf-8 -*-
"""capstone

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sjvCOeQA_tea3cgKqvms9e8sag0zMzBP

**IMPORT LIBRARY**
"""

import pandas as pd

"""**FASILITAS**"""

fasilitas = pd.read_csv('fasilitas.csv', header=None)
fasilitas.columns = ["id_fasilitas", "fasilitas", "url_gambar"]

"""#BALI"""

fasilitas_bali = pd.read_csv('db_fasilitas_bali.csv')
hotel_bali = pd.read_csv('db_hotel_bali.csv')
df_fasilitas_bali = pd.merge(fasilitas, fasilitas_bali, left_on="id_fasilitas", right_on="list_fasil_id", how="right")
# Misal dataframe kamu bernama df_fasilitas_bali
df_grouped = df_fasilitas_bali.groupby('hotel_id')['fasilitas'].agg(list).reset_index()

# Jika ingin rename kolom hasil
df_grouped.rename(columns={'fasilitas': 'list_fasilitas'}, inplace=True)
final_bali = pd.merge(df_grouped, hotel_bali, left_on="hotel_id", right_on="Unnamed: 0", how="left")

# Tambahkan kolom 'Provinsi'
final_bali['Provinsi'] = 'Bali'
final_bali

"""#DIY

Read Dataset
"""

df1 = pd.read_csv('db_hotel_diy.csv', header=None, names=[
    'Unnamed: 0',       # ID
    'Hotel Image',      # Gambar
    'Hotel Name',       # Nama hotel
    'Tipe Properti',   # Jenis properti (Hotel / Guest House)
    'City',             # Lokasi wilayah kecil
    'Address',          # Alamat lengkap
    'Hotel Rating',     # Rating hotel (misal 4.3)
    'Min',              # Harga minimum
    'Max',              # Harga maksimum
    'Lattitute',        # Koordinat latitude
    'Longitude'         # Koordinat longitude
])
df2 = pd.read_csv('hotel-diy.csv')
fasilitas_diy = pd.read_csv('/content/db_fasilitas_diy.csv', header=None, names=['list_fasil_id', 'hotel_id'])

"""Merged Fasilitas DIY dan Fasilitas"""

df_fasilitas_diy = pd.merge(fasilitas, fasilitas_diy, left_on="id_fasilitas", right_on="list_fasil_id", how="right")

"""Merged data fasilitas dengan DB Hotel DIY"""

df_grouped = df_fasilitas_diy.groupby('hotel_id')['fasilitas'].agg(list).reset_index()

df_grouped.rename(columns={'fasilitas': 'list_fasilitas'}, inplace=True)
final = pd.merge(df_grouped, df1, left_on="hotel_id", right_on="Unnamed: 0", how="left")

final.head()

"""Merged DB Hotel DIY dan Hotel DIY"""

import re

df2['Tiper Properti'] = df2['Tiper Properti'].str.extract(r'<div class="property-type">(.*?)</div>')

final = final.drop(columns=['hotel_id'])

df2 = df2.rename(columns={
    'Facilities': 'list_fasilitas'
})

final_diy = pd.concat([final, df2], ignore_index=True)
final_diy['Tipe Properti'] = final_diy['Tipe Properti'].fillna(final_diy['Tiper Properti'])
final_diy.drop(columns=['Tiper Properti'], inplace=True)

df2.head()

# Tambahkan kolom 'Provinsi'
final_diy['Provinsi'] = 'DIY'
final_diy

"""#JABAR

Read Dataset
"""

hotel_jabar = pd.read_csv('/content/hotel-jabar.csv')
db_hotel_jabar = pd.read_csv('/content/db_hotel_jabar.csv', header=None, names=[
    'Unnamed: 0',       # ID
    'Hotel Image',      # Gambar
    'Hotel Name',       # Nama hotel
    'Tipe Properti',   # Jenis properti (Hotel / Guest House)
    'City',             # Lokasi wilayah kecil
    'Address',          # Alamat lengkap
    'Hotel Rating',     # Rating hotel (misal 4.3)
    'Min',              # Harga minimum
    'Max',              # Harga maksimum
    'Lattitute',        # Koordinat latitude
    'Longitude'         # Koordinat longitude
])
fasilitas_jabar = pd.read_csv('/content/db_fasilitas_jabar.csv', header=None, names=['list_fasil_id', 'hotel_id'])

"""Merged Fasilitas Jabar dengan Fasilitas"""

df_fasilitas_jabar = pd.merge(fasilitas, fasilitas_jabar, left_on="id_fasilitas", right_on="list_fasil_id",how="right")

df_fasilitas_jabar.head()

"""Merged Fasilitas Jabar dan DB Hotel Jabar"""

df_grouped1 = df_fasilitas_jabar.groupby('hotel_id')['fasilitas'].agg(list).reset_index()

df_grouped1.rename(columns={'fasilitas': 'list_fasilitas'}, inplace=True)
jabar = pd.merge(df_grouped1, db_hotel_jabar, left_on="hotel_id", right_on="Unnamed: 0", how="left")

jabar.head()

"""Merged DB Jabar yang udah ada fasilitas dengan Hotel Jabar"""

jabar = jabar.drop(columns=['hotel_id'])

hotel_jabar = hotel_jabar.rename(columns={
    'Facilities': 'list_fasilitas'
})

final_jabar = pd.concat([jabar, hotel_jabar], ignore_index=True)

hotel_jabar.head()

# Tambahkan kolom 'Provinsi'
final_jabar['Provinsi'] = 'Jawa Barat'
final_jabar

# Buat mask untuk baris di mana 'Tipe Properti' adalah NaN
mask_null_tipe = final_jabar['Tipe Properti'].isnull()

# Buat mask untuk baris di mana 'Hotel Name' mengandung kata 'Hotel' (case insensitive)
mask_hotel_name = final_jabar['Hotel Name'].str.contains('Hotel', case=False, na=False)

# Gabungkan kedua kondisi tersebut
mask = mask_null_tipe & mask_hotel_name

# Isi 'Tipe Properti' dengan 'Hotel' untuk baris yang sesuai kondisi
final_jabar.loc[mask, 'Tipe Properti'] = 'Hotel'

final_jabar['Tipe Properti'] = final_jabar['Tipe Properti'].fillna('Other')

"""#JATIM

Read Dataset
"""

hotel_jatim = pd.read_csv('/content/hotel-jatim.csv')
db_hotel_jatim = pd.read_csv('/content/db_hotel_jatim.csv')
fasilitas_jatim = pd.read_csv('/content/db_fasilitas_jatim.csv')

hotel_jatim.head()

db_hotel_jatim.head()

db_hotel_jatim = pd.read_csv('/content/db_hotel_jatim.csv', header=None, names=[
    'Unnamed: 0',       # ID
    'Hotel Image',      # Gambar
    'Hotel Name',       # Nama hotel
    'Tipe Properti',   # Jenis properti (Hotel / Guest House)
    'City',             # Lokasi wilayah kecil
    'Address',          # Alamat lengkap
    'Hotel Rating',     # Rating hotel (misal 4.3)
    'Min',              # Harga minimum
    'Max',              # Harga maksimum
    'Lattitute',        # Koordinat latitude
    'Longitude'         # Koordinat longitude
])
fasilitas_jatim = pd.read_csv('/content/db_fasilitas_jatim.csv', header=None, names=['list_fasil_id', 'hotel_id'])

"""Merge Fasilitas Jatim dengan Fasilitas"""

df_fasilitas_jatim = pd.merge(fasilitas, fasilitas_jatim, left_on="id_fasilitas", right_on="list_fasil_id", how="right")

df_fasilitas_jatim.head()

"""Merge Fasilitas Jatim dengan DB Hotel Jatim"""

df_grouped2 = df_fasilitas_jatim.groupby('hotel_id')['fasilitas'].agg(list).reset_index()

df_grouped2.rename(columns={'fasilitas': 'list_fasilitas'}, inplace=True)
jatim = pd.merge(df_grouped2, db_hotel_jatim, left_on="hotel_id", right_on="Unnamed: 0", how="left")

jatim.head()

"""Merge DB Hotel Jatim dan Hotel Jatim"""

jatim = jatim.drop(columns=['hotel_id'])

hotel_jatim = hotel_jatim.rename(columns={
    'Facilities': 'list_fasilitas'
})

final_jatim = pd.concat([jatim, hotel_jatim], ignore_index=True)

# Tambahkan kolom 'Provinsi'
final_jatim['Provinsi'] = 'Jawa Timur'
final_jatim

final_jatim.isnull().sum()

# Buat mask untuk baris di mana 'Tipe Properti' adalah NaN
mask_null_tipe = final_jatim['Tipe Properti'].isnull()

# Buat mask untuk baris di mana 'Hotel Name' mengandung kata 'Hotel' (case insensitive)
mask_hotel_name = final_jatim['Hotel Name'].str.contains('Hotel', case=False, na=False)

# Gabungkan kedua kondisi tersebut
mask = mask_null_tipe & mask_hotel_name

# Isi 'Tipe Properti' dengan 'Hotel' untuk baris yang sesuai kondisi
final_jatim.loc[mask, 'Tipe Properti'] = 'Hotel'

final_jatim.isnull().sum()

null_rows = final_jatim[final_jatim.isnull().any(axis=1)]
null_rows.head()

final_jatim['Tipe Properti'] = final_jatim['Tipe Properti'].fillna('Other')

"""#JAKARTA

Membaca dataset
"""

db_hotel_jakarta = pd.read_csv('/content/db_hotel_jakarta.csv', header=None, names=[
    'Unnamed: 0',       # ID
    'Hotel Image',      # Gambar
    'Hotel Name',       # Nama hotel
    'Tipe Properti',   # Jenis properti (Hotel / Guest House)
    'City',             # Lokasi wilayah kecil
    'Address',          # Alamat lengkap
    'Hotel Rating',     # Rating hotel (misal 4.3)
    'Min',              # Harga minimum
    'Max',              # Harga maksimum
    'Lattitute',        # Koordinat latitude
    'Longitude'         # Koordinat longitude
])
fasilitas_jakarta = pd.read_csv('/content/db_fasilitas_jakarta.csv', header=None, names=['list_fasil_id', 'hotel_id'])

db_hotel_jakarta.head()

fasilitas_jakarta.head()

"""Merge Fasilitas Jakarta dengan Fasilitas"""

df_fasilitas_jakarta = pd.merge(fasilitas, fasilitas_jakarta, left_on="id_fasilitas", right_on="list_fasil_id", how="right")

df_fasilitas_jakarta.head()

"""Merge Fasilitas Jakarta dengan DB Hotel Jakarta"""

df_grouped3 = df_fasilitas_jakarta.groupby('hotel_id')['fasilitas'].agg(list).reset_index()

df_grouped3.rename(columns={'fasilitas': 'list_fasilitas'}, inplace=True)
final_jakarta = pd.merge(df_grouped3, db_hotel_jakarta, left_on="hotel_id", right_on="Unnamed: 0", how="left")

# Tambahkan kolom 'Provinsi'
final_jakarta['Provinsi'] = 'DKI Jakarta'

final_jakarta = final_jakarta.dropna()

final_jakarta.isnull().sum()

"""#JATENG

Membaca dataset
"""

hotel_jateng = pd.read_csv('/content/hotel-jateng.csv')
db_hotel_jateng = pd.read_csv('/content/db_hotel_jateng.csv', header=None, names=[
    'Unnamed: 0',       # ID
    'Hotel Image',      # Gambar
    'Hotel Name',       # Nama hotel
    'Tipe Properti',   # Jenis properti (Hotel / Guest House)
    'City',             # Lokasi wilayah kecil
    'Address',          # Alamat lengkap
    'Hotel Rating',     # Rating hotel (misal 4.3)
    'Min',              # Harga minimum
    'Max',              # Harga maksimum
    'Lattitute',        # Koordinat latitude
    'Longitude'         # Koordinat longitude
])
fasilitas_jateng = pd.read_csv('/content/db_fasilitas_jateng.csv', header=None, names=['list_fasil_id', 'hotel_id'])

"""Merge Fasilitas Jateng dengan Fasilitas"""

df_fasilitas_jateng = pd.merge(fasilitas, fasilitas_jateng, left_on="id_fasilitas", right_on="list_fasil_id", how="right")

df_fasilitas_jateng.head()

"""Merge Fasilitas Jateng dengan DB Hotel Jateng"""

df_grouped4 = df_fasilitas_jateng.groupby('hotel_id')['fasilitas'].agg(list).reset_index()

df_grouped4.rename(columns={'fasilitas': 'list_fasilitas'}, inplace=True)
jateng = pd.merge(df_grouped4, db_hotel_jateng, left_on="hotel_id", right_on="Unnamed: 0", how="left")

jateng.head()

hotel_jateng

"""Merge DB Hotel Jateng dengan Hotel Jateng"""

jateng = jateng.drop(columns=['hotel_id'])

hotel_jateng = hotel_jateng.rename(columns={
    'Facilities': 'list_fasilitas'
})

final_jateng = pd.concat([jateng, hotel_jateng], ignore_index=True)
final_jateng['Tipe Properti'] = final_jateng['Tipe Properti'].fillna(final_jateng['Tiper Properti'])
final_jateng.drop(columns=['Tiper Properti'], inplace=True)

# Tambahkan kolom 'Provinsi'
final_jateng['Provinsi'] = 'Jawa Tengah'

final_jateng

final_jateng = final_jateng.dropna()

"""#Final Dataset"""

final_bali = final_bali.drop(columns=['hotel_id'])
final_jakarta = final_jakarta.drop(columns=['hotel_id'])

indonesia_hotels = pd.concat([final_bali, final_diy, final_jabar, final_jakarta, final_jateng, final_jatim], ignore_index=True)

indonesia_hotels

indonesia_hotels.to_csv('indonesia_hotels.csv', index=False)

from google.colab import files
files.download('indonesia_hotels.csv')

"""# PRA PROSES"""

indonesia_hotels.info()

indonesia_hotels = indonesia_hotels.dropna()

print(indonesia_hotels['Hotel Rating'].value_counts().get('Belum ada rating', 0))

"""# EDA"""

import folium

# Buat peta dengan lokasi awal (pusat Indonesia)
peta = folium.Map(location=[-2.5, 118], zoom_start=5)

# Tambahkan marker untuk setiap baris
for _, row in indonesia_hotels.iterrows():
    folium.Marker(
        location=[row['Lattitute'], row['Longitude']],
        popup=row['Provinsi'],
        tooltip=row['Provinsi']
    ).add_to(peta)

# Tampilkan
peta

"""# SISTEM REKOMENDASI"""

import ast

def parse_fasilitas(val):
    if isinstance(val, str):
        try:
            return ast.literal_eval(val)
        except Exception:
            # Jika gagal parsing, return list dengan satu elemen string
            return [val]
    elif isinstance(val, list):
        return val
    else:
        # tipe lain, coba convert ke list jika bisa, atau kosongkan
        return []

# Terapkan fungsi ke kolom
indonesia_hotels['list_fasilitas'] = indonesia_hotels['list_fasilitas'].apply(parse_fasilitas)

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import MultiLabelBinarizer

# Contoh mapping mood ke fasilitas yang sudah sesuai daftar fasilitas unik
mood_facilities_map = {
    "Rileks": ['spa', 'kolam renang', 'pemandangan laut', 'taman', 'kamar kedap suara'],  # sesuaikan sesuai daftar
    "Romantis": ['teras atau balkon', 'lighting hangat', 'bathub', 'tempat tidur king-size'],
    "Workation": ['wifi gratis', 'meja kerja', 'kursi ergonomis', 'dekat coworking space'],
    "Petualang": ['mendaki', 'penyewaan mobil', 'guide lokal', 'area hiking'],
    "Sosial": ['bar/lounge', 'live music', 'event malam', 'aktivitas bersama'],
    "Healing": ['spa', 'aromatherapy', 'yoga', 'taman', 'suasana tenang'],
}

def rule_based_filtering(df, mood, budget_min, budget_max, fasilitas_wajib=[]):
    mood_keywords = mood_facilities_map.get(mood, [])

    # fungsi cek fasilitas wajib ada di fasilitas hotel
    def fasilitas_match(fasilitas_list, required_list):
        fasilitas_list_lower = [f.lower() for f in fasilitas_list]
        return all(req.lower() in fasilitas_list_lower for req in required_list)

    # cek fasilitas mood cocok (minimal 1)
    def fasilitas_mood_match(fasilitas_list, mood_list):
        fasilitas_list_lower = [f.lower() for f in fasilitas_list]
        return any(m.lower() in fasilitas_list_lower for m in mood_list)

    filtered = df[
        df['list_fasilitas'].apply(lambda x: fasilitas_match(x, fasilitas_wajib)) &
        (df['Min'] >= budget_min) &
        (df['Max'] <= budget_max) &
        df['list_fasilitas'].apply(lambda x: fasilitas_mood_match(x, mood_keywords))
    ].copy()

    return filtered

def content_based_recommendation(df, hotel_name, top_n=5):
    # Vectorisasi fasilitas dengan MultiLabelBinarizer
    mlb = MultiLabelBinarizer()
    fasilitas_encoded = mlb.fit_transform(df['list_fasilitas'].apply(lambda x: [f.lower() for f in x]))
    fitur_df = pd.DataFrame(fasilitas_encoded, columns=mlb.classes_, index=df.index)

    # Hitung cosine similarity
    cosine_sim = cosine_similarity(fitur_df)

    # Cari indeks hotel yang dipilih user
    try:
        idx = df.index[df['Hotel Name'] == hotel_name][0]
    except IndexError:
        print("Hotel tidak ditemukan untuk content-based filtering.")
        return pd.DataFrame()

    # Ambil similarity scores untuk hotel tersebut
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Urutkan berdasarkan similarity tertinggi, kecuali hotel itu sendiri
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)
    sim_scores = [s for s in sim_scores if s[0] != idx]

    # Ambil top N hotel mirip
    top_indices = [i[0] for i in sim_scores[:top_n]]

    return df.iloc[top_indices]

# ---- Contoh penggunaan ----

# 1. Rule-based filtering dulu
filtered_hotels = rule_based_filtering(
    indonesia_hotels,
    mood="Rileks",
    budget_min=200000,
    budget_max=800000,
    fasilitas_wajib=['wifi', 'ac']
)

print("Filtered hotels berdasarkan rule:")
print(filtered_hotels[['Hotel Name', 'list_fasilitas', 'Min', 'Max']].head())

# 2. Content-based recommendation berdasarkan hotel favorit user
if not filtered_hotels.empty:
    hotel_favorit = filtered_hotels.iloc[0]['Hotel Name']
    rekomendasi_similar = content_based_recommendation(filtered_hotels, hotel_favorit, top_n=5)

    print(f"\nRekomendasi mirip dengan hotel favorit '{hotel_favorit}':")
    print(rekomendasi_similar[['Hotel Name', 'list_fasilitas', 'Min', 'Max']])
else:
    print("Tidak ada hotel yang cocok dengan filter.")

# Import library
import geopandas as gpd
from shapely.geometry import Point
import folium
from folium.plugins import MarkerCluster

# Membaca dataset hotel
hotel = pd.read_csv("indonesia_hotels.csv")

# Membuat GeoDataFrame dari koordinat hotel
hotel_geom = [Point(xy) for xy in zip(hotel.Longitude, hotel.Lattitute)]
hotel_gdf = gpd.GeoDataFrame(hotel, geometry=hotel_geom)
hotel_gdf.set_crs('EPSG:4326', inplace=True)

# Filter hotel yang memiliki rating valid (bukan 'Belum ada rating')
hotel_gdf = hotel_gdf[hotel_gdf['Hotel Rating'] != 'Belum ada rating']
hotel_gdf['Hotel Rating'] = hotel_gdf['Hotel Rating'].astype(float)

# Contoh: hitung rata-rata rating hotel per kota
rating_per_city = hotel_gdf.groupby('City')['Hotel Rating'].mean().sort_values(ascending=False)
print("Rata-rata rating hotel per kota:")
print(rating_per_city)

# Contoh visualisasi: Peta sebaran hotel
m = folium.Map(location=[-2.5, 117.5], zoom_start=5)
marker_cluster = MarkerCluster().add_to(m)

for idx, row in hotel_gdf.iterrows():
    folium.Marker(
        location=[row['Lattitute'], row['Longitude']],
        popup=f"{row['Hotel Name']} - Rating: {row['Hotel Rating']}",
        icon=folium.Icon(color='blue', icon='info-sign')
    ).add_to(marker_cluster)

display(m)